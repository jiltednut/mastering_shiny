ggplot(data = mpg) +
geom_point(
mapping = aes(x = displ, y = hwy),
position = "jitter"
)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_jitter()
ggplot(data = mpg) +
geom_jitter(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_jitter(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_jitter(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_jitter()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_jitter()
?geom_jitter
# 4
?geom_boxplot
ggplot(data = mpg, aes(x = drv, y = hwy))
ggplot(data = mpg, aes(x = drv, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, aes(x = drv, y = hwy)) +
geom_boxplot(position = "identity")
ggplot(data = mpg, aes(x = drv, y = hwy)) +
geom_boxplot(aes(position =))
ggplot(data = mpg, aes(x = drv, y = hwy)) +
geom_boxplot(position = "identity")
ggplot(data = mpg, aes(x = drv, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, aes(x = drv, y = hwy)) +
geom_boxplot(position = "identity")
ggplot(data = mpg, aes(x = drv, y = hwy)) +
geom_boxplot(position = "dodge2")
ggplot(data = mpg, aes(x = drv, y = hwy)) +
geom_boxplot(position = "identity")
ggplot(data = mpg, aes(x = drv, y = hwy, color = class)) +
geom_boxplot(position = "identity")
ggplot(data = mpg, aes(x = drv, y = hwy, color = class)) +
geom_boxplot(position = "dodge2")
# 4geom_bar()
?geom_boxplot
ggplot(mpg, aes(x = factor(1), fill = drv)) +
geom_bar()
ggplor(data = mpg, aes(x = factor(1), fill = drv))
ggplot(data = mpg, aes(x = factor(1), fill = drv)) +
geom_bar(width = 1) +
coord_ploar(theta = y)
ggplot(data = mpg, aes(x = factor(1), fill = drv)) +
geom_bar(width = 1) +
coord_ploar(theta = "y")
ggplot(data = mpg, aes(x = factor(1), fill = drv)) +
geom_bar(width = 1) +
coord_polar(theta = "y")
ggplot(data = mpg, aes(x = factor(1), fill = drv)) +
geom_bar(width = 1) +
coord_polar()
# Using coord_flip()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
# Using coord_quickmap
irl <- map_data("irl")
install_packages("maps")
install_package("maps")
install.package("maps")
install.packages("maps")
# Using coord_quickmap
irl <- map_data("irl")
library(maps)
# Using coord_quickmap
irl <- map_data("irl")
?map_data
# Using coord_quickmap
irl <- map_data("nz")
# Using coord_quickmap
nz <- map_data("nz")
ggplot(data = mpg, mapping = aes(x = long, y = lat, group = group))+
geom_polygon(fill = "white", color = "black")
ggplot(data = nz, mapping = aes(x = long, y = lat, group = group))+
geom_polygon(fill = "white", color = "black")
ggplot(data = nz, mapping = aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", color = "black") +
coord_quickmap()
# Using cood_polar
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1) +
theme(aspect_ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
# Using cood_polar
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1) +
theme(aspect_ratio = 1) +
labs(x = NULL, y = NULL)
# Using cood_polar
bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar
bar + coord_polar
bar + coord_polar()
# 2
# labs() adds the ability to label the plot
?labs
# 3
?coord_map
# 4
ggplot(data = mpg, mapping = aes(x = cyt, y = hwy)) +
geom_point()
# 4
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
# 4
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()
# 4
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()
# 4
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline()
# 4
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
coord_fixed()
# 4
p <- ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline()
p
p + coord_fixed()
library(tidyverse)
this_is_a_really_long_name <- 2.5
this_is_a_really_long_name
"this"
this
this
(a = 5)
a
library(tidyverse)
library(nycflights13)
require(library(nycflights13))
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
flights
# 1
# a
summary(flights$arr_delay)
filter(flights, arr_delay > 120)
filter(flights, dest %in% c("IAH", "HOU"))
filter(flights, dest %in% c("IAH", "HOU")) %>% select(dest)
# 1
# a
summary(flights$arr_delay)
# 1
# a
flights
unique(flights$carrier)
filter(flights, carrier %in% c("UA", "AA", "DL"))
filter(flights, month >= 7 & month <=9)
filter(flights, dep_delay <= 0 & arr_delay >= 120)
filter(flights, dep_delay >= 60)
filter(flights, dep_delay >= 60 & dep_delay - arr_delay > 30)
filter(flights, dep_time >= 0000 & dep_time <= 0600)
# 2
filter(flight, between(month, 7, 9))
# 2
filter(flights, between(month, 7, 9))
filter(flights, month >= 7 & month <=9)
filter(flights, between(dep_time, 0, 600))
filter(flights, dep_time >= 0000 & dep_time <= 0600)
# 3
summary(flights)
NA^0
NA | TRUE
NA & TRUE
NA * 0
NA * 1
FALSE & NA
FALSE | NA
filter(flights, dep_time %% 2400 <= 600)
filter(flights, dep_time >= 0000 & dep_time <= 0600) # Error as midnight = 2400
filter(flights, dep_time %% 2400 <= 600)
filter(flights, dep_time >= 0000 & dep_time <= 0600) # Error as midnight = 2400
filter(flights, dep_time %% 2400 <= 600)
## Exercises
# 1
arrange(flights, is.na(dep_delay))
## Exercises
# 1
arrange(flights, desc(is.na(dep_delay)))
# 2
arrange(flights, arr_time - dep_time)
arrange(flights, desc(is.na(dep_delay)), dep_delay)
# 2
arrange(flights, dep_delay)
# 2
arrange(flights, desc(dep_delay))
arrange(flights, dep_delay)
# 3
flights <- flights %>% mutate(ground_speed = distance / (air_time / 60))
arrange(flights, desc(ground_speed)
arrange(flights, desc(ground_speed))
arrange(flights, desc(ground_speed))
arrange(flights, desc(ground_speed)) %>%
select(ground_speed, year, month, day, dep_time, arr_time)
arrange(flights, desc(ground_speed)) %>%
select(ground_speed, year, month, day, dep_time, arr_time, arr_delay)
# 4
arrange(flights, desc(distance))
arrange(flights, distance)
#### Using select
cols = c("dep_delay","arr_time", "dep_time", "arr_delay")
select(flights, one_of(cols))
select(flights, dep_delay, dep_delay, dep_delay, dep_delay)
# 3
cols <- c("year", "month", "day", "dep_delay", "arr_delay")
select(flights, cols)
# 3
cols <- c("year", "month", "day", "dep_delay", "arr_delay")
select(flights, cols)
# 4
select(flights, contains("TIME"))
names(flights)
>select
>select
?select
select(flights, contains("TIME", ignore.case = FALSE))
flights_sml <- flights %>%
select(year:day,
ends_with("delay"),
distance,
airtime)
flights_sml <- flights %>%
select(year:day,
ends_with("delay"),
distance,
air_time)
flights_sml <- flights %>%
select(year:day,
ends_with("delay"),
distance,
air_time) %>%
mutate(
gain = arr_delay - dep_delay,
speed = distance / air_time
)
(flights_sml <- flights %>%
select(year:day,
ends_with("delay"),
distance,
air_time) %>%
mutate(
gain = arr_delay - dep_delay,
speed = distance / air_time
))
(flights_sml %>%
mutate(
gain = arr_delay - dep_delay,
speed = distance / air_time
))
flights_sml %>%
mutate(
gain = arr_delay - dep_delay,
speed = distance / air_time
)
flights_sml <- flights %>%
select(year:day,
ends_with("delay"),
distance,
air_time)
flights_sml %>%
mutate(
gain = arr_delay - dep_delay,
speed = distance / air_time
)
flights_sml %>%
mutate(
gain = arr_delay - dep_delay,
speed = distance / air_time * 60
)
gain = arr_delay - dep_delay,
speed = distance / (air_time / 60)
flights_sml %>%
mutate(
gain = arr_delay - dep_delay,
speed = distance / (air_time / 60)
)
flights_sml %>%
mutate(
gain = arr_delay - dep_delay,
hours = air_time / 60,
speed = distance / hours
)
flights_sml %>%
transmute()
flights_sml %>%
transmute(
gain = arr_delay - dep_delay,
hours = air_time / 60,
speed = distance / hours
)
## Exercises
# 1
head(flights_sml)
## Exercises
# 1
head(flights)
flights %>%
select(dep_time, sched_dep_time) %>%
mutate(dep_time_hours = dep_time %/% 100,
dep_time_mins = dep_time %% 100)
flights %>%
select(dep_time, sched_dep_time) %>%
mutate(dep_time_mins = ((dep_time %/% 100) * 60) + dep_time %% 100,
sched_dep_time_hours = ((sched_dep_time %/% 100) * 60) + sched_dep_time %% 100
)
# 2
flights %>%
select(air_time, arr_time, dep_time) %>%
mutate(arr_time - dep_time)
# 2
flights %>%
select(air_time, arr_time, dep_time) %>%
mutate(flight_time = arr_time - dep_time)
# 2
get_mins <- function(num){ return ((num %/% 100} * 60) + num %% 100)
# 2
get_mins <- function(num){ return ((num %/% 100} * 60) + num %% 100)}
# 2
get_mins <- function(num){ return (((num %/% 100) * 60) + num %% 100)}
flights %>%
select(air_time, arr_time, dep_time) %>%
mutate(flight_time = arr_time - dep_time)
flights %>%
select(air_time, arr_time, dep_time) %>%
mutate(flight_time = get_mins(arr_time) - get_mins(dep_time))
flights %>%
select(air_time, dep_time, arr_time) %>%
mutate(flight_time = get_mins(arr_time) - get_mins(dep_time))
# 3
flights %>%
select(dep_time, sched_dep_time, dep_delay) %>%
mutate(delay = get_mins(dep_time) - get_mins(sched_dep_time))
# 3
flights %>%
select(dep_time, sched_dep_time, dep_delay) %>%
mutate(delay = get_mins(dep_time) - get_mins(sched_dep_time),
same = dep_delay == delay) %>%
filter(same == FALSE)
# 4
flights %>%
select(carrier, flight, arr_delay, dep_delay) %>%
mutate(gain = arr_delay - dep_delay) %>%
arrange(desc(gain))
# 4
flights %>%
select(carrier, flight, arr_delay, dep_delay) %>%
mutate(gain = dep_delay) %>%
arrange(desc(gain))
# 4
flights %>%
select(carrier, flight, arr_delay, dep_delay) %>%
mutate(rank = min_rank(dep_delay))
# 4
flights %>%
select(carrier, flight, arr_delay, dep_delay) %>%
mutate(rank = min_rank(dep_delay)) %>%
arrange(rank)
# 4
flights %>%
select(carrier, flight, arr_delay, dep_delay) %>%
mutate(rank = min_rank(desc(dep_delay))) %>%
arrange(rank)
?min_rank
# 4
flights %>%
select(carrier, flight, arr_delay, dep_delay) %>%
mutate(rank = min_rank(desc(dep_delay))) %>%
arrange(rank) %>%
group_by(rank) %>%
summarise(n = n())
# 4
flights %>%
select(carrier, flight, arr_delay, dep_delay) %>%
mutate(rank = min_rank(desc(dep_delay))) %>%
arrange(rank) %>%
group_by(rank) %>%
summarise(n = n()) %>%
arrange(desc(n))
# 4
flights %>%
select(carrier, flight, arr_delay, dep_delay) %>%
mutate(rank = min_rank(desc(dep_delay))) %>%
arrange(rank) %>%
filter(rank = 234113)
# 4
flights %>%
select(carrier, flight, arr_delay, dep_delay) %>%
mutate(rank = min_rank(desc(dep_delay))) %>%
arrange(rank) %>%
filter(rank == 234113)
# 4
flights %>%
select(carrier, flight, arr_delay, dep_delay) %>%
mutate(rank = min_rank(desc(dep_delay), ties.method = "min")) %>%
arrange(rank) %>%
filter(rank == 234113)
# 4
flights %>%
select(carrier, flight, arr_delay, dep_delay) %>%
mutate(rank = min_rank(desc(dep_delay), ties.method = "min")) %>%
arrange(rank) %>%
filter(rank == 234113)
1:3 + 1:10
flights %>%
group_by(year, month, day) %>%
summarise(mean = mena(dep_delay, na.rm = TRUE))
flights %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay, na.rm = TRUE))
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
# Counting
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
ggplot(data = delays, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 10)
ggplot(data = delays, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 10) +
labs(x = "delay (mins)")
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay, na.rm = TRUE),
n = n()
)
ggplot(data = delays, mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
delays %>%
filter(n > 25) %>%
ggplot(mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
delays %>%
filter(n > 25) %>%
ggplot(mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
delays %>%
filter(n > 25) %>%
ggplot(mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
install.packages("Lahmna")
install.packages("Lahman")
batting <- Lahman::Batting
batter <- batting %>%
group_by(playerID) %>%
summarise(
ba = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
ab = sum(AB, na.rm = TRUE)
)
batters %>%
filter(ab > 100) %>%
ggplot(mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth(se = FALSE)
batters <- batting %>%
group_by(playerID) %>%
summarise(
ba = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
ab = sum(AB, na.rm = TRUE)
)
batters %>%
filter(ab > 100) %>%
ggplot(mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth(se = FALSE)
batters %>%
#  filter(ab > 100) %>%
ggplot(mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth(se = FALSE)
batters %>%
filter(ab > 100) %>%
ggplot(mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth(se = FALSE)
